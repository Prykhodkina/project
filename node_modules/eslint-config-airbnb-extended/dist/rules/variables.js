"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const confusing_browser_globals_1 = __importDefault(require("confusing-browser-globals"));
const utils_1 = require("../utils");
const variablesRules = {
    name: 'airbnb/config/variables',
    files: utils_1.allFiles,
    rules: {
        // enforce or disallow variable initializations at definition
        'init-declarations': 'off',
        // disallow deletion of variables
        'no-delete-var': 'error',
        // disallow labels that share a name with a variable
        // https://eslint.org/docs/rules/no-label-var
        'no-label-var': 'error',
        // disallow specific globals
        'no-restricted-globals': [
            'error',
            {
                name: 'isFinite',
                message: 'Use Number.isFinite instead https://github.com/airbnb/javascript#standard-library--isfinite',
            },
            {
                name: 'isNaN',
                message: 'Use Number.isNaN instead https://github.com/airbnb/javascript#standard-library--isnan',
            },
            ...confusing_browser_globals_1.default.map((g) => ({
                name: g,
                message: `Use window.${g} instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md`,
            })),
        ],
        // disallow declaration of variables already declared in the outer scope
        'no-shadow': 'error',
        // disallow shadowing of names such as arguments
        'no-shadow-restricted-names': 'error',
        // disallow use of undeclared variables unless mentioned in a /*global */ block
        'no-undef': 'error',
        // disallow use of undefined when initializing variables
        'no-undef-init': 'error',
        // disallow use of undefined variable
        // https://eslint.org/docs/rules/no-undefined
        'no-undefined': 'off',
        // disallow declaration of variables that are not used in the code
        'no-unused-vars': [
            'warn',
            {
                vars: 'all',
                args: 'after-used',
                ignoreRestSiblings: true,
                argsIgnorePattern: '^_',
            },
        ],
        // disallow use of variables before they are defined
        'no-use-before-define': [
            'error',
            {
                functions: true,
                classes: true,
                variables: true,
            },
        ],
    },
};
exports.default = variablesRules;
