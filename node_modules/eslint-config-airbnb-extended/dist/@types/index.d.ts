/**
 * Direct export isn't allowed, it will increase the size of d.ts
 */
export declare const rules: {
    readonly base: Record<"strict" | "imports" | "variables" | "bestPractices" | "errors" | "es6" | "style" | "stylistic" | "stylisticPlus" | "importsStrict", import("eslint").Linter.Config>;
    readonly node: Record<"globals" | "base" | "promises" | "noUnsupportedFeatures", import("eslint").Linter.Config>;
    readonly react: Record<"strict" | "stylistic" | "base" | "jsxA11y" | "hooks", import("eslint").Linter.Config>;
    readonly next: Record<"base" | "coreWebVitals", import("eslint").Linter.Config>;
    readonly typescript: Record<"imports" | "stylistic" | "stylisticPlus" | "base" | "typescriptEslint" | "typescriptEslintStrict", import("eslint").Linter.Config>;
};
export declare const configs: {
    readonly base: Record<"recommended" | "typescript" | "all", import("eslint").Linter.Config[]>;
    readonly react: Record<"recommended" | "typescript" | "all", import("eslint").Linter.Config[]>;
    readonly next: Record<"recommended" | "typescript" | "all", import("eslint").Linter.Config[]>;
    readonly node: Record<"recommended", import("eslint").Linter.Config[]>;
};
export declare const plugins: {
    readonly stylistic: import("eslint").Linter.Config;
    readonly importX: import("eslint").Linter.Config;
    readonly node: import("eslint").Linter.Config;
    readonly react: import("eslint").Linter.Config;
    readonly reactA11y: import("eslint").Linter.Config;
    readonly reactHooks: import("eslint").Linter.Config;
    readonly next: import("eslint").Linter.Config;
    readonly typescriptEslint: import("eslint").Linter.Config;
};
export declare const extensions: {
    readonly base: Record<"recommended" | "typescript", import("eslint").Linter.Config[]>;
    readonly react: Record<"recommended", import("eslint").Linter.Config[]>;
    readonly next: Record<"recommended", import("eslint").Linter.Config[]>;
    readonly node: Record<"recommended", import("eslint").Linter.Config[]>;
};
